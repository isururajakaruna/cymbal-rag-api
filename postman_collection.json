{
  "info": {
    "name": "Cymbal RAG API - Complete Collection",
    "description": "Complete Postman collection for testing all Cymbal RAG API endpoints including file validation, upload, search, and file management. This collection includes comprehensive descriptions and expected response formats for each API endpoint. Features include file tagging for organization and tag-based filtering for targeted searches.",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
    "version": "2.0.0"
  },
  "variable": [
    {
      "key": "base_url",
      "value": "http://localhost:8000",
      "description": "Base URL for the Cymbal RAG API"
    },
    {
      "key": "auth_token",
      "value": "InaqhBh3P0MaJCBQnxF05DsdpWjbESpLJvoa-2tfwxI",
      "description": "Authentication token for API access"
    },
    {
      "key": "search_query",
      "value": "WHO & AOH Cut-Off Time",
      "description": "Default search query for testing RAG search"
    }
  ],
  "item": [
    {
      "name": "File Validation APIs",
      "description": "APIs for validating file uploads before processing. These endpoints check file format, content quality, and handle file existence conflicts.",
      "item": [
        {
          "name": "Get Supported File Formats",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/file/supported-formats?token={auth_token}",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "file",
                "supported-formats"
              ],
              "query": [
                {
                  "key": "token",
                  "value": "{{auth_token}}",
                  "description": "Authentication token"
                }
              ]
            },
            "description": "Retrieve list of supported file formats for upload"
          },
          "response": [
            {
              "name": "Success Response",
              "originalRequest": {
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "{{base_url}}/api/v1/file/supported-formats",
                  "host": [
                    "{{base_url}}"
                  ],
                  "path": [
                    "api",
                    "v1",
                    "file",
                    "supported-formats"
                  ]
                }
              },
              "status": "OK",
              "code": 200,
              "_postman_previewlanguage": "json",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "body": "{\n  \"supported_formats\": [\n    \"image/jpeg\",\n    \"image/png\",\n    \"application/pdf\",\n    \"application/vnd.openxmlformats-officedocument.wordprocessingml.document\",\n    \"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet\",\n    \"application/vnd.ms-excel\",\n    \"text/csv\"\n  ],\n  \"extensions\": [\n    \".jpg\",\n    \".jpeg\",\n    \".png\",\n    \".pdf\",\n    \".docx\",\n    \".xlsx\",\n    \".xls\",\n    \".csv\"\n  ]\n}"
            }
          ]
        },
        {
          "name": "Validate File - PDF",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "multipart/form-data"
              }
            ],
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "file",
                  "type": "file",
                  "src": "test_data/post_pdf.pdf",
                  "description": "PDF file to validate"
                },
                {
                  "key": "replace_existing",
                  "value": "false",
                  "type": "text",
                  "description": "Whether to replace existing file if it exists"
                }
              ]
            },
            "url": {
              "raw": "{{base_url}}/api/v1/file/validate",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "file",
                "validate"
              ]
            },
            "description": "Validate a PDF file for upload. This endpoint uploads the file to a temporary location, checks if it already exists, validates the file format, and performs content quality analysis using Gemini AI."
          },
          "response": [
            {
              "name": "Success Response",
              "originalRequest": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "multipart/form-data"
                  }
                ],
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "file",
                      "type": "file",
                      "src": "test_data/post_pdf.pdf"
                    },
                    {
                      "key": "replace_existing",
                      "value": "false",
                      "type": "text"
                    }
                  ]
                },
                "url": {
                  "raw": "{{base_url}}/api/v1/file/validate",
                  "host": [
                    "{{base_url}}"
                  ],
                  "path": [
                    "api",
                    "v1",
                    "file",
                    "validate"
                  ]
                }
              },
              "status": "OK",
              "code": 200,
              "_postman_previewlanguage": "json",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "body": "{\n  \"success\": true,\n  \"validation_id\": \"abc123def456\",\n  \"filename\": \"post_pdf.pdf\",\n  \"file_size\": 104844,\n  \"content_type\": \"application/pdf\",\n  \"temp_path\": \"_tmp/post_pdf.pdf\",\n  \"file_exists\": false,\n  \"supported_format\": true,\n  \"supported_extensions\": [\n    \".jpg\", \".jpeg\", \".png\", \".pdf\", \".docx\", \".xlsx\", \".xls\"\n  ],\n  \"provided_type\": \"application/pdf\",\n  \"provided_extension\": \".pdf\",\n  \"quality_score\": 8,\n  \"reasoning\": \"Document contains substantial content suitable for knowledge base\",\n  \"suggestion\": \"File is ready for upload\",\n  \"message\": \"File validated successfully and ready for upload\"\n}"
            },
            {
              "name": "File Already Exists",
              "originalRequest": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "multipart/form-data"
                  }
                ],
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "file",
                      "type": "file",
                      "src": "test_data/post_pdf.pdf"
                    },
                    {
                      "key": "replace_existing",
                      "value": "false",
                      "type": "text"
                    }
                  ]
                },
                "url": {
                  "raw": "{{base_url}}/api/v1/file/validate",
                  "host": [
                    "{{base_url}}"
                  ],
                  "path": [
                    "api",
                    "v1",
                    "file",
                    "validate"
                  ]
                }
              },
              "status": "Conflict",
              "code": 409,
              "_postman_previewlanguage": "json",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "body": "{\n  \"success\": false,\n  \"error\": \"File already exists\",\n  \"filename\": \"post_pdf.pdf\",\n  \"file_exists\": true,\n  \"suggestion\": \"Set replace_existing=true to replace the existing file\"\n}"
            },
            {
              "name": "Unsupported Format",
              "originalRequest": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "multipart/form-data"
                  }
                ],
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "file",
                      "type": "file",
                      "src": "test_data/unsupported.txt"
                    }
                  ]
                },
                "url": {
                  "raw": "{{base_url}}/api/v1/file/validate",
                  "host": [
                    "{{base_url}}"
                  ],
                  "path": [
                    "api",
                    "v1",
                    "file",
                    "validate"
                  ]
                }
              },
              "status": "Bad Request",
              "code": 400,
              "_postman_previewlanguage": "json",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "body": "{\n  \"success\": false,\n  \"error\": \"Unsupported file format\",\n  \"provided_type\": \"text/plain\",\n  \"provided_extension\": \".txt\",\n  \"supported_formats\": [\n    \"image/jpeg\", \"image/png\", \"application/pdf\", \"application/vnd.openxmlformats-officedocument.wordprocessingml.document\", \"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet\", \"application/vnd.ms-excel\", \"text/csv\"\n  ],\n  \"supported_extensions\": [\n    \".jpg\", \".jpeg\", \".png\", \".pdf\", \".docx\", \".xlsx\", \".xls\", \".csv\"\n  ]\n}"
            }
          ]
        },
        {
          "name": "Validate File - Image (PNG)",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "multipart/form-data"
              }
            ],
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "file",
                  "type": "file",
                  "src": "test_data/image_with_text.png",
                  "description": "PNG image file to validate"
                },
                {
                  "key": "replace_existing",
                  "value": "false",
                  "type": "text"
                }
              ]
            },
            "url": {
              "raw": "{{base_url}}/api/v1/file/validate",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "file",
                "validate"
              ]
            },
            "description": "Validate an image file (PNG) for upload. Images are processed using Gemini's multimodal capabilities to extract text content and assess quality."
          },
          "response": []
        },
        {
          "name": "Validate File - Excel (XLSX)",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "multipart/form-data"
              }
            ],
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "file",
                  "type": "file",
                  "src": "test_data/sample_data.xlsx",
                  "description": "Excel file to validate"
                },
                {
                  "key": "replace_existing",
                  "value": "false",
                  "type": "text"
                }
              ]
            },
            "url": {
              "raw": "{{base_url}}/api/v1/file/validate",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "file",
                "validate"
              ]
            },
            "description": "Validate an Excel file (XLSX) for upload. Excel files are processed using pandas to extract data from all sheets."
          },
          "response": []
        },
        {
          "name": "Validate File - CSV",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "multipart/form-data"
              }
            ],
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "file",
                  "type": "file",
                  "src": "test_data/sample_data.csv",
                  "description": "CSV file to validate"
                },
                {
                  "key": "replace_existing",
                  "value": "false",
                  "type": "text"
                }
              ]
            },
            "url": {
              "raw": "{{base_url}}/api/v1/file/validate",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "file",
                "validate"
              ]
            },
            "description": "Validate a CSV file for upload. CSV files are processed using pandas to extract structured data and convert it to readable text format."
          },
          "response": []
        }
      ]
    },
    {
      "name": "File Upload APIs",
      "description": "APIs for uploading files to the knowledge base. Files are processed, chunked, embedded, and stored in Vector Search for retrieval. Supports tagging for file organization and categorization.",
      "item": [
        {
          "name": "Upload File Direct",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "multipart/form-data"
              }
            ],
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "file",
                  "type": "file",
                  "src": "test_data/post_pdf.pdf",
                  "description": "File to upload directly"
                },
                {
                  "key": "replace_existing",
                  "value": "true",
                  "type": "text",
                  "description": "Whether to replace existing file"
                },
                {
                  "key": "tags",
                  "value": "product,catalog,electronics",
                  "type": "text",
                  "description": "Comma-separated tags for categorizing the file (e.g., 'product,catalog,electronics')"
                }
              ]
            },
            "url": {
              "raw": "{{base_url}}/api/v1/upload/direct",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "upload",
                "direct"
              ]
            },
            "description": "Upload a file directly to the knowledge base. The file is processed, chunked based on configuration, embedded using Vertex AI, and stored in Vector Search. Empty pages are automatically skipped and tables are converted to structured format. Tags can be provided for categorizing and filtering files."
          },
          "response": [
            {
              "name": "Success Response",
              "originalRequest": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "multipart/form-data"
                  }
                ],
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "file",
                      "type": "file",
                      "src": "test_data/post_pdf.pdf"
                    },
                    {
                      "key": "replace_existing",
                      "value": "true",
                      "type": "text"
                    }
                  ]
                },
                "url": {
                  "raw": "{{base_url}}/api/v1/upload/direct",
                  "host": [
                    "{{base_url}}"
                  ],
                  "path": [
                    "api",
                    "v1",
                    "upload",
                    "direct"
                  ]
                }
              },
              "status": "OK",
              "code": 200,
              "_postman_previewlanguage": "json",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "body": "{\n  \"success\": true,\n  \"filename\": \"post_pdf.pdf\",\n  \"original_filename\": \"post_pdf.pdf\",\n  \"upload_path\": \"uploads/post_pdf.pdf\",\n  \"file_size\": 104844,\n  \"content_type\": \"application/pdf\",\n  \"total_chunks\": 6,\n  \"embeddings_stored\": 6,\n  \"message\": \"File 'post_pdf.pdf' successfully uploaded and processed for knowledge base\"\n}"
            }
          ]
        },
        {
          "name": "Upload File from Validation",
          "request": {
            "method": "POST",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/upload/{{validation_id}}",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "upload",
                "{{validation_id}}"
              ]
            },
            "description": "Upload a file using its validation ID. This endpoint moves the file from the temporary location to the uploads directory and processes it for the knowledge base."
          },
          "response": [
            {
              "name": "Success Response",
              "originalRequest": {
                "method": "POST",
                "header": [],
                "url": {
                  "raw": "{{base_url}}/api/v1/upload/{{validation_id}}",
                  "host": [
                    "{{base_url}}"
                  ],
                  "path": [
                    "api",
                    "v1",
                    "upload",
                    "{{validation_id}}"
                  ]
                }
              },
              "status": "OK",
              "code": 200,
              "_postman_previewlanguage": "json",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "body": "{\n  \"success\": true,\n  \"filename\": \"post_pdf.pdf\",\n  \"original_filename\": \"post_pdf.pdf\",\n  \"upload_path\": \"uploads/post_pdf.pdf\",\n  \"file_size\": 104844,\n  \"content_type\": \"application/pdf\",\n  \"total_chunks\": 6,\n  \"embeddings_stored\": 6,\n  \"message\": \"File 'post_pdf.pdf' successfully uploaded and processed for knowledge base\"\n}"
            }
          ]
        },
        {
          "name": "Upload File with HR Tags",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "multipart/form-data"
              }
            ],
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "file",
                  "type": "file",
                  "src": "test_data/employee_handbook.pdf",
                  "description": "HR document to upload with HR tags"
                },
                {
                  "key": "replace_existing",
                  "value": "true",
                  "type": "text",
                  "description": "Whether to replace existing file"
                },
                {
                  "key": "tags",
                  "value": "hr,policy,employee,handbook",
                  "type": "text",
                  "description": "HR-related tags for categorizing the file"
                }
              ]
            },
            "url": {
              "raw": "{{base_url}}/api/v1/upload/direct",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "upload",
                "direct"
              ]
            },
            "description": "Example of uploading an HR document with appropriate tags. This demonstrates how to categorize files by department or content type for better organization and targeted searches."
          },
          "response": [
            {
              "name": "HR Upload Success",
              "originalRequest": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "multipart/form-data"
                  }
                ],
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "file",
                      "type": "file",
                      "src": "test_data/employee_handbook.pdf",
                      "description": "HR document to upload with HR tags"
                    },
                    {
                      "key": "replace_existing",
                      "value": "true",
                      "type": "text",
                      "description": "Whether to replace existing file"
                    },
                    {
                      "key": "tags",
                      "value": "hr,policy,employee,handbook",
                      "type": "text",
                      "description": "HR-related tags for categorizing the file"
                    }
                  ]
                },
                "url": {
                  "raw": "{{base_url}}/api/v1/upload/direct",
                  "host": [
                    "{{base_url}}"
                  ],
                  "path": [
                    "api",
                    "v1",
                    "upload",
                    "direct"
                  ]
                }
              },
              "status": "OK",
              "code": 200,
              "_postman_previewlanguage": "json",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "body": "{\n  \"success\": true,\n  \"filename\": \"employee_handbook.pdf\",\n  \"original_filename\": \"employee_handbook.pdf\",\n  \"upload_path\": \"uploads/employee_handbook.pdf\",\n  \"file_size\": 256000,\n  \"content_type\": \"application/pdf\",\n  \"total_chunks\": 8,\n  \"embeddings_stored\": 8,\n  \"message\": \"File 'employee_handbook.pdf' successfully uploaded and processed for knowledge base\"\n}"
            }
          ]
        }
      ]
    },
    {
      "name": "File Management APIs",
      "description": "APIs for managing uploaded files including listing, viewing, downloading, and getting statistics. File listings include tags for organization and categorization.",
      "item": [
        {
          "name": "List Files",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/files/list?sort_by=date&limit=10&offset=0&search=&tags=&token={auth_token}",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "files",
                "list"
              ],
              "query": [
                {
                  "key": "sort_by",
                  "value": "date",
                  "description": "Sort by 'date', 'name', or 'size'"
                },
                {
                  "key": "limit",
                  "value": "10",
                  "description": "Number of files to return (optional)"
                },
                {
                  "key": "offset",
                  "value": "0",
                  "description": "Number of files to skip (optional)"
                },
                {
                  "key": "search",
                  "value": "",
                  "description": "Search term for filename filtering (optional)"
                },
                {
                  "key": "tags",
                  "value": "",
                  "description": "Comma-separated list of tags to filter by (e.g., 'product,hr')"
                },
                {
                  "key": "token",
                  "value": "{{auth_token}}",
                  "description": "Authentication token"
                }
              ]
            },
            "description": "List all uploaded files with pagination, sorting, search, and tag filtering capabilities. Returns file metadata including name, path, type, size, last updated timestamp, and tags for organization. Use the 'tags' parameter to filter files by specific tags (e.g., 'product,hr')."
          },
          "response": [
            {
              "name": "Success Response",
              "originalRequest": {
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "{{base_url}}/api/v1/files/list?sort_by=date&limit=10&offset=0&search=",
                  "host": [
                    "{{base_url}}"
                  ],
                  "path": [
                    "api",
                    "v1",
                    "files",
                    "list"
                  ],
                  "query": [
                    {
                      "key": "sort_by",
                      "value": "date"
                    },
                    {
                      "key": "limit",
                      "value": "10"
                    },
                    {
                      "key": "offset",
                      "value": "0"
                    },
                    {
                      "key": "search",
                      "value": ""
                    }
                  ]
                }
              },
              "status": "OK",
              "code": 200,
              "_postman_previewlanguage": "json",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "body": "{\n  \"success\": true,\n  \"files\": [\n    {\n      \"name\": \"product_catalog.csv\",\n      \"path\": \"uploads/product_catalog.csv\",\n      \"file_type\": \"text/csv (.csv)\",\n      \"last_updated\": \"2025-09-07T08:30:00.000000Z\",\n      \"size\": 1091,\n      \"tags\": [\"product\", \"catalog\", \"electronics\"]\n    },\n    {\n      \"name\": \"post_pdf.pdf\",\n      \"path\": \"uploads/post_pdf.pdf\",\n      \"file_type\": \"application/pdf (.pdf)\",\n      \"last_updated\": \"2025-09-07T07:07:07.434000Z\",\n      \"size\": 104844,\n      \"tags\": []\n    },\n    {\n      \"name\": \"image_with_text.png\",\n      \"path\": \"uploads/image_with_text.png\",\n      \"file_type\": \"image/png (.png)\",\n      \"last_updated\": \"2025-09-07T04:52:44.333000Z\",\n      \"size\": 21188,\n      \"tags\": []\n    }\n  ],\n  \"total_count\": 3,\n  \"search_query\": null,\n  \"sort_by\": \"date\",\n  \"limit\": 10,\n  \"offset\": 0,\n  \"tags_filter\": null\n}"
            }
          ]
        },
        {
          "name": "List Files with Tag Filter",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/files/list?tags=product,catalog&token={auth_token}",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "files",
                "list"
              ],
              "query": [
                {
                  "key": "tags",
                  "value": "product,catalog",
                  "description": "Filter files by specific tags"
                },
                {
                  "key": "token",
                  "value": "{{auth_token}}",
                  "description": "Authentication token"
                }
              ]
            },
            "description": "Example of listing files filtered by specific tags. This demonstrates how to retrieve only files that have the specified tags (e.g., 'product' and 'catalog'). Useful for organizing and finding files by category."
          },
          "response": [
            {
              "name": "Tag Filtered Response",
              "originalRequest": {
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "{{base_url}}/api/v1/files/list?tags=product,catalog",
                  "host": [
                    "{{base_url}}"
                  ],
                  "path": [
                    "api",
                    "v1",
                    "files",
                    "list"
                  ],
                  "query": [
                    {
                      "key": "tags",
                      "value": "product,catalog"
                    }
                  ]
                }
              },
              "status": "OK",
              "code": 200,
              "_postman_previewlanguage": "json",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "body": "{\n  \"success\": true,\n  \"files\": [\n    {\n      \"name\": \"product_catalog.csv\",\n      \"path\": \"uploads/product_catalog.csv\",\n      \"file_type\": \"text/csv (.csv)\",\n      \"last_updated\": \"2025-09-07T08:30:00.000000Z\",\n      \"size\": 1091,\n      \"tags\": [\"product\", \"catalog\", \"electronics\"]\n    }\n  ],\n  \"total_count\": 1,\n  \"search_query\": null,\n  \"sort_by\": \"date\",\n  \"limit\": null,\n  \"offset\": 0,\n  \"tags_filter\": [\"product\", \"catalog\"]\n}"
            }
          ]
        },
        {
          "name": "Download File",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/files/view?filename={{filename}}&token={auth_token}",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "files",
                "view"
              ],
              "query": [
                {
                  "key": "filename",
                  "value": "{{filename}}",
                  "description": "Name of the file to download (as returned by list API)"
                },
                {
                  "key": "token",
                  "value": "{{auth_token}}",
                  "description": "Authentication token"
                }
              ]
            },
            "description": "Download a file by its filename. Returns the file content with appropriate headers for download."
          },
          "response": [
            {
              "name": "Success Response",
              "originalRequest": {
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "{{base_url}}/api/v1/files/view?filename={{filename}}",
                  "host": [
                    "{{base_url}}"
                  ],
                  "path": [
                    "api",
                    "v1",
                    "files",
                    "view"
                  ],
                  "query": [
                    {
                      "key": "filename",
                      "value": "{{filename}}"
                    }
                  ]
                }
              },
              "status": "OK",
              "code": 200,
              "_postman_previewlanguage": "raw",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/pdf"
                },
                {
                  "key": "Content-Disposition",
                  "value": "attachment; filename=\"post_pdf.pdf\""
                }
              ],
              "cookie": [],
              "body": "[Binary file content]"
            },
            {
              "name": "File Not Found",
              "originalRequest": {
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "{{base_url}}/api/v1/files/view?filename=nonexistent.pdf",
                  "host": [
                    "{{base_url}}"
                  ],
                  "path": [
                    "api",
                    "v1",
                    "files",
                    "view"
                  ],
                  "query": [
                    {
                      "key": "filename",
                      "value": "nonexistent.pdf"
                    }
                  ]
                }
              },
              "status": "Not Found",
              "code": 404,
              "_postman_previewlanguage": "json",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "body": "{\n  \"success\": false,\n  \"error\": \"File not found\",\n  \"filename\": \"nonexistent.pdf\"\n}"
            }
          ]
        },
        {
          "name": "Get Embedding Stats",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/files/embedding-stats?filename={{filename}}&token={auth_token}",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "files",
                "embedding-stats"
              ],
              "query": [
                {
                  "key": "filename",
                  "value": "{{filename}}",
                  "description": "Name of the file to get stats for (as returned by list API)"
                },
                {
                  "key": "token",
                  "value": "{{auth_token}}",
                  "description": "Authentication token"
                }
              ]
            },
            "description": "Get embedding statistics for a specific file including total embeddings, datapoint IDs, and file metadata."
          },
          "response": [
            {
              "name": "Success Response",
              "originalRequest": {
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "{{base_url}}/api/v1/files/embedding-stats?filename={{filename}}",
                  "host": [
                    "{{base_url}}"
                  ],
                  "path": [
                    "api",
                    "v1",
                    "files",
                    "embedding-stats"
                  ],
                  "query": [
                    {
                      "key": "filename",
                      "value": "{{filename}}"
                    }
                  ]
                }
              },
              "status": "OK",
              "code": 200,
              "_postman_previewlanguage": "json",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "body": "{\n  \"success\": true,\n  \"file_info\": {\n    \"name\": \"post_pdf.pdf\",\n    \"path\": \"uploads/post_pdf.pdf\",\n    \"file_type\": \"application/pdf (.pdf)\",\n    \"last_updated\": \"2025-09-07T07:07:07.434000Z\",\n    \"size\": 104844\n  },\n  \"embedding_stats\": {\n    \"total_embeddings\": 6,\n    \"datapoint_ids\": [\n      \"post_pdf.pdf_0_819a7b22\",\n      \"post_pdf.pdf_1_fa73183c\",\n      \"post_pdf.pdf_2_d6885a1e\",\n      \"post_pdf.pdf_3_f8fab3cf\",\n      \"post_pdf.pdf_4_47303a0a\",\n      \"post_pdf.pdf_5_71226582\"\n    ],\n    \"has_embeddings\": true\n  },\n  \"message\": \"File has 6 embeddings stored in Vector Search\"\n}"
            }
          ]
        },
        {
          "name": "Delete File",
          "request": {
            "method": "DELETE",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/upload/delete?filename={{filename}}",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "upload",
                "delete"
              ],
              "query": [
                {
                  "key": "filename",
                  "value": "{{filename}}",
                  "description": "Name of the file to delete (as returned by list API)"
                }
              ]
            },
            "description": "Delete an uploaded file and its embeddings from the knowledge base. This endpoint removes both the file from Google Cloud Storage and all associated embeddings from Vector Search."
          },
          "response": [
            {
              "name": "Success Response",
              "originalRequest": {
                "method": "DELETE",
                "header": [],
                "url": {
                  "raw": "{{base_url}}/api/v1/upload/delete?filename={{filename}}",
                  "host": [
                    "{{base_url}}"
                  ],
                  "path": [
                    "api",
                    "v1",
                    "upload",
                    "delete"
                  ],
                  "query": [
                    {
                      "key": "filename",
                      "value": "{{filename}}"
                    }
                  ]
                }
              },
              "status": "OK",
              "code": 200,
              "_postman_previewlanguage": "json",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "body": "{\n  \"success\": true,\n  \"filename\": \"post_pdf.pdf\",\n  \"embeddings_removed\": true,\n  \"file_deleted\": true,\n  \"message\": \"File 'post_pdf.pdf' and its embeddings have been removed\"\n}"
            },
            {
              "name": "File Not Found",
              "originalRequest": {
                "method": "DELETE",
                "header": [],
                "url": {
                  "raw": "{{base_url}}/api/v1/upload/delete?filename=nonexistent.pdf",
                  "host": [
                    "{{base_url}}"
                  ],
                  "path": [
                    "api",
                    "v1",
                    "upload",
                    "delete"
                  ],
                  "query": [
                    {
                      "key": "filename",
                      "value": "nonexistent.pdf"
                    }
                  ]
                }
              },
              "status": "Not Found",
              "code": 404,
              "_postman_previewlanguage": "json",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "body": "{\n  \"success\": false,\n  \"error\": \"File 'nonexistent.pdf' not found in uploads directory\",\n  \"filename\": \"nonexistent.pdf\"\n}"
            }
          ]
        }
      ]
    },
    {
      "name": "RAG Search APIs",
      "description": "APIs for performing Retrieval-Augmented Generation (RAG) search using vector similarity and Gemini AI for response generation. Supports tag-based filtering for targeted searches within categorized content.",
      "item": [
        {
          "name": "RAG Search (POST)",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"query\": \"{{search_query}}\",\n  \"ktop\": 10,\n  \"threshold\": 0.7,\n  \"file_ids\": [\"post_pdf.pdf\", \"image_with_text.png\"],\n  \"tags\": [\"product\", \"catalog\"]\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{base_url}}/api/v1/search/rag",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "search",
                "rag"
              ]
            },
            "description": "Perform RAG search using POST method. This endpoint takes a search query, performs vector similarity search, groups results by file, and generates a comprehensive response using Gemini AI. Supports filtering by file IDs, similarity thresholds, and tags for targeted searches."
          },
          "response": [
            {
              "name": "Success Response",
              "originalRequest": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"query\": \"WHO & AOH Cut-Off Time\",\n  \"ktop\": 10,\n  \"threshold\": 0.7,\n  \"file_ids\": [\"post_pdf.pdf\"],\n  \"tags\": [\"product\", \"catalog\"]\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{base_url}}/api/v1/search/rag",
                  "host": [
                    "{{base_url}}"
                  ],
                  "path": [
                    "api",
                    "v1",
                    "search",
                    "rag"
                  ]
                }
              },
              "status": "OK",
              "code": 200,
              "_postman_previewlanguage": "json",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "body": "{\n  \"success\": true,\n  \"query\": \"WHO & AOH Cut-Off Time\",\n  \"files\": [\n    {\n      \"name\": \"post_pdf.pdf\",\n      \"path\": \"uploads/post_pdf.pdf\",\n      \"file_type\": \"application/pdf (.pdf)\",\n      \"last_updated\": \"2025-09-07T07:07:07.434000Z\",\n      \"size\": 104844,\n      \"tags\": [\"product\", \"catalog\", \"electronics\"],\n      \"matched_chunks\": [\n        {\n          \"content\": \"## Table: WHO & AOH Cut-Off Time\\n### Definition\\n- Within Office Hours (WOH)\\n- After Office Hours (AOH)\\n### Day\\n- Mondays to Fridays *Excluding Public Holidays*\\n- Mondays to Fridays *Excluding Public Holidays*, Saturdays, Sundays & Public Holidays\\n### Time of Call\\n- 9:00am \u2013 6:00pm\\n- 6:01pm \u2013 11:59pm\\n- 12:00am \u2013 8:59am\",\n          \"file_id\": \"post_pdf.pdf\",\n          \"filename\": \"post_pdf.pdf\",\n          \"chunk_index\": 0,\n          \"similarity_score\": 0.39130622148513794,\n          \"metadata\": {\n            \"page_number\": \"1\",\n            \"type\": \"pdf_page\",\n            \"processor\": \"gemini_multimodal\",\n            \"filename\": \"post_pdf.pdf\",\n            \"chunk_size\": \"1966\",\n            \"chunk_index\": \"0\",\n            \"total_chunks\": \"6\",\n            \"original_filename\": \"post_pdf.pdf\",\n            \"content_type\": \"application/pdf\",\n            \"content\": \"[Full chunk content]\"\n          }\n        }\n      ]\n    }\n  ],\n  \"total_files\": 1,\n  \"total_chunks\": 3,\n  \"rag_response\": \"The 'WHO & AOH Cut-Off Time' refers to the timeframes for handling 'Postal Critical \u2013 Top Priority Cases' and 'Urgent Redelivery for Registered Service'. Here's a breakdown of the cut-off times: ### Definitions: * **Within Office Hours (WOH)** * **After Office Hours (AOH)** ### Day and Time of Call: * **Mondays to Fridays (Excluding Public Holidays)** * 9:00am \u2013 6:00 pm * **Mondays to Fridays (Excluding Public Holidays), Saturdays, Sundays & Public Holidays** * 6:01 pm \u2013 11:59 pm * 12:00 am \u2013 8:59 am **Note:** The process described for these cases is only available WITHIN OFFICE HOURS ONLY and can only be handled by SMEs and above.\",\n  \"processing_time_ms\": 7758.564233779907,\n  \"search_parameters\": {\n    \"ktop\": 10,\n    \"threshold\": 0.7,\n    \"file_ids\": [\"post_pdf.pdf\"]\n  }\n}"
            }
          ]
        },
        {
          "name": "RAG Search (GET)",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/search/rag?query={{search_query}}&ktop=10&threshold=0.7&file_ids=post_pdf.pdf,image_with_text.png&tags=product,catalog&token={auth_token}",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "search",
                "rag"
              ],
              "query": [
                {
                  "key": "query",
                  "value": "{{search_query}}",
                  "description": "Search query text"
                },
                {
                  "key": "ktop",
                  "value": "10",
                  "description": "Number of top results to retrieve (1-50)"
                },
                {
                  "key": "threshold",
                  "value": "0.7",
                  "description": "Similarity threshold (0.0-1.0)"
                },
                {
                  "key": "file_ids",
                  "value": "post_pdf.pdf,image_with_text.png",
                  "description": "Comma-separated list of file IDs to search within"
                },
                {
                  "key": "tags",
                  "value": "product,catalog",
                  "description": "Comma-separated list of tags to filter by"
                },
                {
                  "key": "token",
                  "value": "{{auth_token}}",
                  "description": "Authentication token"
                }
              ]
            },
            "description": "Perform RAG search using GET method with query parameters. Same functionality as POST method but using URL parameters for easier testing and integration. Supports tag filtering for targeted searches."
          },
          "response": []
        },
        {
          "name": "RAG Search with Tag Filtering",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"query\": \"What products are available?\",\n  \"ktop\": 5,\n  \"threshold\": 0.3,\n  \"tags\": [\"product\", \"catalog\"]\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{base_url}}/api/v1/search/rag",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "search",
                "rag"
              ]
            },
            "description": "Example of RAG search with tag filtering. This demonstrates how to search for content only within files that have specific tags. Useful for targeted searches within categorized content."
          },
          "response": [
            {
              "name": "Tag Filtered Response",
              "originalRequest": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"query\": \"What products are available?\",\n  \"ktop\": 5,\n  \"threshold\": 0.3,\n  \"tags\": [\"product\", \"catalog\"]\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{base_url}}/api/v1/search/rag",
                  "host": [
                    "{{base_url}}"
                  ],
                  "path": [
                    "api",
                    "v1",
                    "search",
                    "rag"
                  ]
                }
              },
              "status": "OK",
              "code": 200,
              "_postman_previewlanguage": "json",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "body": "{\n  \"success\": true,\n  \"query\": \"What products are available?\",\n  \"files\": [\n    {\n      \"name\": \"product_catalog.csv\",\n      \"path\": \"uploads/product_catalog.csv\",\n      \"file_type\": \"text/csv (.csv)\",\n      \"last_updated\": \"2025-09-07T08:30:00.000000Z\",\n      \"size\": 1091,\n      \"tags\": [\"product\", \"catalog\", \"electronics\"],\n      \"matched_chunks\": [\n        {\n          \"content\": \"Product catalog with various electronics and furniture items...\",\n          \"file_id\": \"product_catalog.csv\",\n          \"filename\": \"product_catalog.csv\",\n          \"chunk_index\": 0,\n          \"distance\": 0.622,\n          \"metadata\": {\n            \"type\": \"csv_data\",\n            \"processor\": \"pandas\",\n            \"filename\": \"product_catalog.csv\",\n            \"tags\": \"product,catalog,electronics\"\n          }\n        }\n      ]\n    }\n  ],\n  \"total_files\": 1,\n  \"total_chunks\": 2,\n  \"rag_response\": \"Based on the product catalog, there are various electronics and furniture products available including wireless mice, mechanical keyboards, office chairs, monitor stands, USB-C hubs, desk lamps, webcams, desk organizers, Bluetooth speakers, and standing desks. All products are categorized and include pricing and stock information.\",\n  \"processing_time_ms\": 1250.5,\n  \"search_parameters\": {\n    \"ktop\": 5,\n    \"threshold\": 0.3,\n    \"tags\": [\"product\", \"catalog\"]\n  }\n}"
            }
          ]
        },
        {
          "name": "Legacy Search (POST)",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"query\": \"{{search_query}}\",\n  \"ktop\": 5,\n  \"threshold\": 0.5\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{base_url}}/api/v1/search/",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "search",
                ""
              ]
            },
            "description": "Legacy search endpoint (deprecated). Use RAG Search endpoints instead for enhanced functionality."
          },
          "response": []
        },
        {
          "name": "Legacy Search (GET)",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/search/?query={{search_query}}&ktop=5&threshold=0.5&token={auth_token}",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "search",
                ""
              ],
              "query": [
                {
                  "key": "query",
                  "value": "{{search_query}}"
                },
                {
                  "key": "ktop",
                  "value": "5"
                },
                {
                  "key": "threshold",
                  "value": "0.5"
                },
                {
                  "key": "token",
                  "value": "{{auth_token}}",
                  "description": "Authentication token"
                }
              ]
            },
            "description": "Legacy search endpoint (deprecated). Use RAG Search endpoints instead for enhanced functionality."
          },
          "response": []
        }
      ]
    },
    {
      "name": "Utility APIs",
      "description": "Utility APIs for managing the system including clearing storage and health checks.",
      "item": [
        {
          "name": "Clear Storage",
          "request": {
            "method": "DELETE",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/storage/clear",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "storage",
                "clear"
              ]
            },
            "description": "Clear all files from both temporary (_tmp) and uploads directories in Google Cloud Storage. Use with caution as this will delete all uploaded files and their embeddings."
          },
          "response": [
            {
              "name": "Success Response",
              "originalRequest": {
                "method": "DELETE",
                "header": [],
                "url": {
                  "raw": "{{base_url}}/api/v1/storage/clear",
                  "host": [
                    "{{base_url}}"
                  ],
                  "path": [
                    "api",
                    "v1",
                    "storage",
                    "clear"
                  ]
                }
              },
              "status": "OK",
              "code": 200,
              "_postman_previewlanguage": "json",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "body": "{\n  \"success\": true,\n  \"message\": \"Storage cleared successfully\",\n  \"files_deleted\": 5,\n  \"embeddings_removed\": true\n}"
            }
          ]
        },
        {
          "name": "Health Check",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/health?token={auth_token}",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "health"
              ],
              "query": [
                {
                  "key": "token",
                  "value": "{{auth_token}}",
                  "description": "Authentication token"
                }
              ]
            },
            "description": "Check the health status of the API server."
          },
          "response": [
            {
              "name": "Success Response",
              "originalRequest": {
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "{{base_url}}/health",
                  "host": [
                    "{{base_url}}"
                  ],
                  "path": [
                    "health"
                  ]
                }
              },
              "status": "OK",
              "code": 200,
              "_postman_previewlanguage": "json",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "body": "{\n  \"status\": \"healthy\",\n  \"timestamp\": \"2025-09-07T07:15:30.123456Z\"\n}"
            }
          ]
        }
      ]
    }
  ],
  "event": [
    {
      "listen": "prerequest",
      "script": {
        "type": "text/javascript",
        "exec": [
          "// Add any pre-request scripts here",
          "console.log('Making request to:', pm.request.url);"
        ]
      }
    },
    {
      "listen": "test",
      "script": {
        "type": "text/javascript",
        "exec": [
          "// Basic response tests",
          "pm.test('Response time is less than 30000ms', function () {",
          "    pm.expect(pm.response.responseTime).to.be.below(30000);",
          "});",
          "",
          "pm.test('Response status is successful', function () {",
          "    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202]);",
          "});",
          "",
          "// Auto-capture validation_id from file validation responses",
          "if (pm.response.code === 200 && pm.response.json() && pm.response.json().validation_id) {",
          "    pm.collectionVariables.set('validation_id', pm.response.json().validation_id);",
          "    console.log('Captured validation_id:', pm.response.json().validation_id);",
          "}",
          "",
          "// Auto-capture filename from list responses",
          "if (pm.response.code === 200 && pm.response.json() && pm.response.json().files && pm.response.json().files.length > 0) {",
          "    pm.collectionVariables.set('filename', pm.response.json().files[0].name);",
          "    console.log('Captured filename:', pm.response.json().files[0].name);",
          "}",
          "",
          "// Test for JSON responses where expected",
          "if (pm.response.headers.get('content-type') && pm.response.headers.get('content-type').includes('application/json')) {",
          "    pm.test('Response is valid JSON', function () {",
          "        pm.response.to.be.json;",
          "    });",
          "}",
          "",
          "// Test for RAG search response structure",
          "if (pm.request.url.path.includes('search/rag') && pm.response.code === 200) {",
          "    pm.test('RAG search response has required fields', function () {",
          "        const jsonData = pm.response.json();",
          "        pm.expect(jsonData).to.have.property('success');",
          "        pm.expect(jsonData).to.have.property('query');",
          "        pm.expect(jsonData).to.have.property('files');",
          "        pm.expect(jsonData).to.have.property('total_files');",
          "        pm.expect(jsonData).to.have.property('total_chunks');",
          "        pm.expect(jsonData).to.have.property('rag_response');",
          "        pm.expect(jsonData).to.have.property('processing_time_ms');",
          "    });",
          "}",
          "",
          "// Test for file upload response structure",
          "if (pm.request.url.path.includes('upload') && pm.response.code === 200) {",
          "    pm.test('Upload response has required fields', function () {",
          "        const jsonData = pm.response.json();",
          "        pm.expect(jsonData).to.have.property('success');",
          "        pm.expect(jsonData).to.have.property('filename');",
          "        pm.expect(jsonData).to.have.property('total_chunks');",
          "        pm.expect(jsonData).to.have.property('embeddings_stored');",
          "    });",
          "}"
        ]
      }
    }
  ]
}